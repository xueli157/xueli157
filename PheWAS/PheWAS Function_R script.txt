my_phewas<-
  function(phenotypes,genotypes,diagnosis_age,data,covariates=c(NA),adjustments=list(NA),outcomes,predictors,cores=1,additive.genotypes=T,significance.threshold,alpha=0.05,unadjusted=F,return.models=F,min.records=20,MASS.confint.level=NA,quick.confint.level) {
  library(dplyr)
  if (missing(phenotypes)) {
    if (!missing(outcomes)) phenotypes=outcomes
    else stop ("Either phenotypes or outcomes must be passed in.")
  }
  if (missing(genotypes)) {
    if (!missing(predictors)) genotypes=predictors
    else stop ("Either genotypes or predictors must be passed in.")
  }
  association_method=my_phe_as
  if (unadjusted) {
    stop ("This customized function does not support unadjusted analysis.")
  }

  # If input is formatted as a set of data frames, reshape it
  if (missing(data)) {
    phe=phenotypes
    gen=genotypes
    cov=covariates
    adjustment=adjustments
    age=diagnosis_age
    id=intersect(names(phenotypes),names(genotypes))
    if (length(id)==0) {stop ("There is no shared column to merge phenotypes and genotypes!")}
    message (paste("Merging data using there shared column: ", id))
    phenotypes=names(phe)
    phenotypes=phenotypes[!(phenotypes %in% id)]
    genotypes=names(gen)
    genotypes=genotypes[!(genotypes %in% id)]
    if (length(phenotypes)<1||length(genotypes)<1) {
      stop ("Either phenotypes or genotypes contained no non-shared columns, yielding no variables for analysis after the merge.")
    }
    data=merge(gen,phe,by=id)
    if (!is.null(names(covariates)[-1])) {
      covariates=names(cov)
      if (sum(id %in% covariates) != length(id)) {stop(paste("The shared ID column(s) do not all exist in covariates: ",id))}
      covariates=covariates[!(covariates %in% id)]
      data=merge(data,cov,by=id)
    }
    if (!is.null(names(diagnosis_age)[-1])) {
      if (length(phenotypes)!=length(names(age)[-1])) {
        stop ("phenotypes and diagnosis age tables do not match on variable numbers.")
      }
      else {
        if (sum(phenotypes!=names(age)[-1])!=0) {
          stop ("phenotypes and diagnosis age tables do not match on variable names or sequence.")
        } else {
          names(age)[-1]=paste(names(age)[-1],"_age",sep="")
          diag_age=names(age)[-1]
          data=merge(data,age,by=id)
        }
      }}
    if (!is.null(names(adjustments)[-1])) {
      adjustments=names(adjustments)
      if (sum(id %in% adjustments)!=length(id)) {stop(paste("The shared ID column(s) do not all exist in adjustments: ",id))}
      adjustments=as.list(c(NA,adjustments[!adjustments %in% id]))
      data=merge(data,adjustment,by=id)
    }
  }
  para=(cores>1)

  # Check to make sure that there were >=1 phenotypes and genotypes
  if (length(phenotypes)<1||length(genotypes)<1) {stop("You must provide at least one genotype/predictor and one phenotype/outcome for analysis.")}

  # Create the full list to iterate over
  phenotypes_and_ages=paste(phenotypes,diag_age,sep=",")
  full_list=expand.grid(phenotypes_and_ages,genotypes,adjustments,stringsAsFactors = F)
  full_list=full_list %>% separate(Var1,c("Pheno","Age"),sep=",")
  full_list=data.frame(t(full_list),stringsAsFactors = F)

  #If parallel, run the parallel version.
  if(para) {
    #Check to make sure there is no existing phewas cluster.
    if(exists("phewas.cluster.handle")) {
      #If there is, kill it and remove it
      message("Old cluster detected (phewas.cluster.handle), removing...")
      try(stopCluster(phewas.cluster.handle), silent=T)
      rm(phewas.cluster.handle, envir=.GlobalEnv)
    }
    message("Starting cluster...")
    assign("phewas.cluster.handle", makeCluster(cores), envir = .GlobalEnv)
    message("Cluster created, finding associations...")
    clusterExport(phewas.cluster.handle,c("data", "covariates"), envir=environment())
    #Loop across every phenotype- iterate in parallel
    result <-parLapplyLB(phewas.cluster.handle, full_list, association_method, additive.genotypes, confint.level=MASS.confint.level, min.records,return.models)
    #Once we have succeeded, stop the cluster and remove it.
    stopCluster(phewas.cluster.handle)
    rm(phewas.cluster.handle, envir=.GlobalEnv)
  } else {
    #Otherwise, just use lapply.
    message("Finding associations...")
    result=lapply(full_list,FUN=association_method, additive.genotypes, min.records,return.models, confint.level=MASS.confint.level, data, covariates)
  }

  if(return.models) {
    message("Collecting models...")
    models=lapply(result,function(x){attributes(x)$model})
    names(models)=sapply(models,function(x){paste0(as.character(terms(x))[c(2,1,3)],collapse=" ")})
  }

  message("Compiling results...")
  successful.phenotypes=na.omit(sapply(result,function(x){attributes(x)$successful.phenotype}))
  n.tests=length(successful.phenotypes)
  successful.phenotypes=unique(successful.phenotypes)
  successful.genotypes=unique(na.omit(sapply(result,function(x){attributes(x)$successful.genotype})))
  sig=bind_rows(result)

  #Report warning if any convergence errors
  if(max(grepl(pattern = "[Error: The model did not converge]", sig$note, fixed=TRUE))){
    warning("Not all models converged, check the notes column for details.")
  }

  message("Cleaning up...")

  #Add significance thresholds
  attributes(sig)$alpha=alpha
  attributes(sig)$n.tests=n.tests
  if(!missing(significance.threshold)) {
    message("Finding significance thresholds...")
    thresh=match(c("p-value","bonferroni","fdr","simplem-genotype","simplem-phenotype","simplem-product"),significance.threshold)
    sm.g=1
    sm.p=1
    #p.value
    if(!is.na(thresh[1])) {
      sig$p.value=sig$p<=alpha
    }
    #bonferroni
    if(!is.na(thresh[2])) {
      sig$bonferroni=sig$p<=alpha/n.tests
      attributes(sig)$bonferroni=alpha/n.tests
    }
    #fdr
    if(!is.na(thresh[3])) {
      sig$fdr=p.adjust(sig$p,method="fdr")<=alpha
    }
    #simplem-genotype
    if(!is.na(thresh[4])|!is.na(thresh[6])) {
      if(length(successful.genotypes)>1){
        eigs=eigen(cor(data[,genotypes],use="pairwise.complete.obs",method="spearman"))[[1]]
        max.eig=sum(eigs)
        sm.g=which.max(cumsum(eigs)>.995*max.eig)
      } else {
        sm.g=1
      }
      sig$simplem.genotype=sig$p<=alpha/sm.g
      attributes(sig)$simplem.genotype=alpha/sm.g
      attributes(sig)$simplem.genotype.meff=sm.g
    }
    #simplem-phenotype
    if(!is.na(thresh[5])|!is.na(thresh[6])) {
      if(length(successful.phenotypes>1)) {
        eigs=try(cor(data[,successful.phenotypes],use="pairwise.complete.obs",method="spearman"),silent=T)
        if(class(eigs)!="try-error"){
          eigs[is.na(eigs)]=0
          eigs=eigen(eigs)[[1]]
          max.eig=sum(eigs)
          sm.p=which.max(cumsum(eigs)>.995*max.eig)
        } else {
          warning("Phentoype correlation generation failed; this is typically due to sparse phenotypes.")
          sm.p=NA
        }
      } else {
        sm.p=1
      }
      sig$simplem.phenotype=sig$p<=alpha/sm.p
      attributes(sig)$simplem.phenotype=alpha/sm.p
      attributes(sig)$simplem.phenotype.meff=sm.p
    }
    #simplem-product
    if(!is.na(thresh[6])) {
      sm=sm.g*sm.p
      sig$simplem.product=sig$p<=alpha/sm
      attributes(sig)$simplem.product=alpha/sm
      attributes(sig)$simplem.product.meff=sm
    }
  }
  if(!missing(outcomes)) names(sig)[names(sig)=="phenotype"]="outcome"
  if(!missing(predictors)) names(sig)[names(sig)=="snp"]="predictor"
  if(return.models){sig=list(results=sig,models=models)}
  if(!missing(quick.confint.level)) {
    if(quick.confint.level>=1|quick.confint.level<=0) {warning("Quick confidence interval requested, but a value in the range (0,1) was not supplied")}
    else {
      sig.names=names(sig)
      two.sided=(1-quick.confint.level)/2
      sig=sig %>% mutate(lower.q=beta+se*qnorm(two.sided),upper.q=beta+se*qnorm(two.sided,lower.tail=F))
      sig=sig  %>% mutate(lower.q=ifelse(sig$type=="logistic",exp(lower.q),lower.q),
                          upper.q=ifelse(sig$type=="logistic",exp(upper.q),upper.q))
      sig=sig[,c(sig.names[1:5],"lower.q","upper.q",sig.names[6:length(sig.names)])]
    }
  }
  return(sig)
}

my_phe_as <-
  function(phe.gen, additive.genotypes=T,min.records=20,return.models=F,confint.level=NA, my.data, my.covariates) {
    if(!missing(my.data)) data=my.data
    if(!missing(my.covariates)) covariates=my.covariates
    #Retrieve the targets for this loop
    phe_o=phe.gen[[1]]
    phe=phe_o
    diag_age=phe.gen[[2]]
    gen=phe.gen[[3]]
    gens=gen
    adjustment=phe.gen[[4]]
    #Subset the data
    d=data[,na.omit(unlist(c(gen,phe,diag_age,covariates,adjustment)))]
    #Turn adjustment into a string, if not NA
    if(!is.na(adjustment[1])) {adjustment=paste(adjustment,collapse=",")}
    else {adjustment=NA_character_} #Make sure it is a character NA for aggregation
    #Alter phe_o if necessary for the regression formula
    if(suppressWarnings(!is.na(as.numeric(phe_o)))) {
      phe=paste0("pheno_",phe_o)
      names(d)[2]=phe
    }
    #Exclude the exclusions for the target phenotype
    d=d[!is.na(d[[phe]]),]
    n_no_snp=sum(is.na(d[[gen]]))
    #Exclude rows with missing data
    d=na.omit(d)
    n_total=nrow(d)
    n_cases=NA_integer_
    n_controls=NA_integer_
    allele_freq=NA_real_
    HWE_pval=NA_real_
    or=NA_real_
    se=NA_real_
    p=NA_real_
    beta=NA_real_
    type=NA_character_
    note=""
    model=NA
    if(n_total<min.records) {
      note=paste(note,"[Error: <",min.records," complete records]")
    } else if(length(unique(na.omit(d[[phe]])))<=1 | length(unique(na.omit(d[[gen]]))) <=1) {
      note=paste(note,"[Error: non-varying phenotype or genotype]")
    } else {
      if(additive.genotypes) {
        if(class(d[[gen]]) %in% c("numeric","integer")){
          allele_freq=sum(d[[gen]])/(2*n_total)
        }
        if(class(d[[gen]]) %in% c("numeric","integer") & sum(!(na.omit(d[[gen]]) %in% 0:2))==0) {
          P=allele_freq
          Q=1-allele_freq
          AA=sum(d[[gen]]==2)
          xAA=P^2*n_total
          Aa=sum(d[[gen]]==1)
          xAa=2*P*Q*n_total
          aa=sum(d[[gen]]==0)
          xaa=Q^2*n_total
          HWE_pval=pchisq((AA-xAA)^2/(xAA)+(Aa-xAa)^2/(xAa)+(aa-xaa)^2/(xaa),1)
        } else {note=paste(note,"[Warning: Genotype is not coded 0,1,2, but additive.genotypes was TRUE.]")}
      }
      #Check if genotype was available
      #Check if phenotype is logical (boolean)
      if(class(d[[phe]]) %in% c("logical")) {
        type = "logistic"
        #Create the logistic model
        n_cases=sum(d[[phe]])
        n_controls=n_total-n_cases
        if(n_cases<min.records|n_controls<min.records) {note=paste(note,"[Error: <",min.records," cases or controls]")}
        else {
          model = glm(as.formula(paste(phe," ~ .")), data=d, family=binomial)
          modsum= summary(model)
          #If the models did not converge, report NA values instead.
          if(model$converged) {
            #Find the rows with results that gets merged across all loops
            gen_list=grep(gen,row.names(modsum$coef))
            gens=row.names(modsum$coef)[gen_list]
            or=exp(modsum$coef[gen_list,1])
            beta=modsum$coef[gen_list,1]
            se=modsum$coef[gen_list,2]
            p=modsum$coef[gen_list,4]
          } else {
            note=paste(note,"[Error: The model did not converge]")
          }
        }
      } else {
        type = "linear"
        if(n_total<min.records) {
          note=paste(note,"[Error: <",min.records," records with phenotype and genotype]")
        } else {
          model = glm(as.formula(paste(phe," ~ .", sep="", collapse="")), data=d)

          modsum= summary(model)
          #If the models did not converge, report NA values instead.
          if(model$converged) {
            #Find the rows with results that gets merged across all loops
            gen_list=grep(gen,row.names(modsum$coef))
            gens=row.names(modsum$coef)[gen_list]
            beta=modsum$coef[gen_list,1]
            se=modsum$coef[gen_list,2]
            p=modsum$coef[gen_list,4]
          } else {
            note=paste(note,"[Error: The model did not converge]")
          }
        }
      }
    }

    #Check to see there were numbers (ie phewas codes) as the predictor, and clean up.
    if(suppressWarnings(!is.na(as.numeric(gen)))){
      gens=substring(gens,2)
      #Clean up if there was just one TRUE entry
      if(length(gens)==1 & substring(gens,length(gens)-4)=="TRUE") {
        gens=substring(gens,1,length(gens)-4)
      }
    }
    output=data.frame(phenotype=phe_o,snp=gens,
                      adjustment=adjustment,
                      beta=beta, SE=se,
                      OR=or,
                      p=p, type=type,
                      n_total=n_total, n_cases=n_cases, n_controls=n_controls,
                      HWE_p=HWE_pval,allele_freq=allele_freq,n_no_snp=n_no_snp,
                      note=note, stringsAsFactors=F)

    #Add confidence intervals if requested.
    if(!is.na(confint.level)) {
      if(!is.na(model)[1]){
        suppressMessages(conf<-confint(model,c("(Intercept)",gens),level=confint.level))
        lower=conf[-1,1]
        upper=conf[-1,2]
        if(type=="logistic") {
          lower=exp(lower)
          upper=exp(upper)
        }
      } else {
        lower=NA_real_
        upper=NA_real_
      }
      output$lower=lower
      output$upper=upper

      output=output[,c("phenotype","snp","adjustment","beta","SE",
                       "lower","upper","OR","p","type",
                       "n_total","n_cases","n_controls",
                       "HWE_p","allele_freq","n_no_snp","note")]
    }

    #If the complete models were requested, add them as well.
    if(return.models) {attributes(output)$model=model}
    attributes(output)$successful.phenotype=ifelse(is.na(p),NA,phe_o)
    attributes(output)$successful.genotype=ifelse(is.na(p),NA,gen)
    #Return this to the loop to be merged.
    output
  }
